import socket
import threading

# Function to handle incoming messages from the server
def receive_messages(client_socket):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                print(message)
            else:
                break
        except:
            print("An error occurred while receiving a message.")
            client_socket.close()
            break

# Function to send messages to the server
def send_messages(client_socket):
    while True:
        message = input("You: ")
        client_socket.send(message.encode('utf-8'))

# Main client function
def client_program():
    host = input("Enter server IP address: ")  # Server IP
    port = 12345  # Port number to connect

    try:
        client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        client_socket.connect((host, port))
        print("Connected to the server.")

        # Start threads for sending and receiving messages
        threading.Thread(target=receive_messages, args=(client_socket,)).start()
        send_messages(client_socket)

    except Exception as e:
        print(f"An error occurred: {e}")

# Main server function
def server_program():
    host = '0.0.0.0'  # Listen on all interfaces
    port = 12345

    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Server started on port {port}. Waiting for connections...")

    clients = []

    def broadcast(message, sender_socket):
        for client in clients:
            if client != sender_socket:
                try:
                    client.send(message)
                except:
                    clients.remove(client)

    def handle_client(client_socket):
        while True:
            try:
                message = client_socket.recv(1024)
                if message:
                    broadcast(message, client_socket)
                else:
                    break
            except:
                clients.remove(client_socket)
                client_socket.close()
                break

    while True:
        client_socket, client_address = server_socket.accept()
        print(f"New connection from {client_address}.")
        clients.append(client_socket)
        threading.Thread(target=handle_client, args=(client_socket,)).start()

if __name__ == "__main__":
    choice = input("Do you want to run the server or client? (server/client): ").strip().lower()
    if choice == "server":
        server_program()
    elif choice == "client":
        client_program()
    else:
        print("Invalid choice. Please choose 'server' or 'client'.")
